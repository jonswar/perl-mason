
=head1 NAME

Mason::Manual::RequestDispatch - How request paths get mapped to page
components

=head1 DESCRIPTION

Given the request path

    /news/sports/hockey

Mason searches for the following components in order, setting $m->path_info as
noted.

    /news/sports/hockey.{mp,mc}
    /news/sports/hockey/index.{mp,mc}
    /news/sports/hockey/dhandler.{mp,mc}
    /news/sports/dhandler.{mp,mc}  # $m->path_info = hockey
    /news/sports.{mp,mc}           # $m->path_info = hockey (but see next section)
    /news/dhandler.{mp,mc}         # $m->path_info = sports/hockey
    /news.{mp,mc}                  # $m->path_info = sports/hockey (but see next section)
    /dhandler.{mp,mc}              # $m->path_info = news/sports/hockey

where C<< .{mp,mc} >> means either C<.mp> (indicating a I<pure-perl>
component). or C<.mc> (indicating a I<top-level> component).

The following sections describe these elements in more detail.

=head2 Autoextended path

The request path is suffixed with ".mp" and ".mc" to translate it to a
component path.

    /news/sports/hockey.{mp,mc}

=head2 Index

An index matches its exact directory, nothing underneath.

    /news/sports/hockey/index.{mp,mc}

=head2 Dhandlers

A dhandler matches its directory as well as anything underneath, setting C<<
$m->path_info >> to the remainder.

    /news/sports/hockey/dhandler.{mp,mc}
    /news/sports/dhandler.{mp,mc}  # $m->path_info = hockey
    /news/dhandler.{mp,mc}         # $m->path_info = sports/hockey
    /dhandler.{mp,mc}              # $m->path_info = news/sports/hockey

=head2 Partial paths

A component can match an initial part of the URL, setting C<< $m->path_info >>
to the remainder:

    /news/sports.{mp,mc}           # $m->path_info = hockey
    /news.{mp,mc}                  # $m->path_info = sports/hockey

Since this isn't always desirable behavior, it must be explicitly enabled for
the component. Mason will call method C<allow_path_info> on the component
class, and will only allow the match if it returns true:

    <%class>
    method allow_path_info { 1 }
    </%class>

The default C<allow_path_info> returns false.

C<allow_path_info> is not checked on dhandlers, since the whole point of
dhandlers is to match partial paths.

=head2 Trailing slash

If the request URL has a trailing slash (ends with C</>), we remove it
before the match process begins. If your component has
C<allow_path_info> return true or if it is a dhandler, the slash will be
part of the C<path_info> information.

For example:

    ## request URL /news/
    /news/index.{mp,mc}     # $m->path_info = '' if allow_path_info => false
    /news/index.{mp,mc}     # $m->path_info = '/' if allow_path_info => true

    /news/dhandler.{mp,mc}  # $m->path_info = '/'

    /news.{mp,mc}           # $m->path_info = '' if news.{mp,mc} has
                            # allow_path_info => false
    /news.{mp,mc}           # $m->path_info = '/' if news.{mp,mc} has
                            # allow_path_info => true

    ## request URL /news/sports/
    /news/sports/index.{mp,mc}     # $m->path_info = '' if index.{mp,mc} has
                                   # allow_path_info => false
    /news/sports/index.{mp,mc}     # $m->path_info = '/' if index.{mp,mc} has
                                   # allow_path_info => true

    /news/sports/dhandler.{mp,mc}  # $m->path_info = '/'

    /news/sports.{mp,mc}           # $m->path_info = '' if sports.{mp,mc}
                                   # has allow_path_info => false
    /news/sports.{mp,mc}           # $m->path_info = '/' if sports.{mp,mc}
                                   # has allow_path_info => true

    /news/dhandler.{mp,mc}         # $m->path_info = 'sports/'

    /news.{mp,mc}                  # will not match if allow_path_info => false
    /news.{mp,mc}                  # $m->path_info = '/sports/' if news.{mp,mc}
                                   # has allow_path_info => true


=head2 Routes

It is possible to use route syntax to more elegantly parse C<< $m->path_info >>
for dhandlers and partial paths, e.g.

    <%class>
    route "{year:[0-9]+}/{month:[0-9]{2}}";
    </%class>

See L<Mason::Plugin::RouterSimple>.

